import type { Tables, TablesInsert, TablesUpdate } from "./db/database.types";

// ============================================================================
// Base Types & Enums
// ============================================================================

/**
 * Enum representing the action taken on a candidate flashcard during generation
 */
export type FlashcardActionType = "accepted" | "edited" | "rejected";

// ============================================================================
// Pagination
// ============================================================================

/**
 * Generic pagination metadata for list responses
 */
export interface PaginationDTO {
  current_page: number;
  total_pages: number;
  total_items: number;
  items_per_page: number;
}

// ============================================================================
// AI Flashcard Generation
// ============================================================================

/**
 * Command to initiate AI flashcard generation
 * POST /generations
 */
export interface GenerateFlashcardsCommand {
  source_text: string;
}

/**
 * Represents a candidate flashcard generated by AI
 */
export interface CandidateFlashcardDTO {
  temp_id: string;
  front: string;
  back: string;
}

/**
 * Response containing generated flashcard candidates
 * POST /generations - Response 201
 */
export interface GenerationSessionDTO {
  generation_session_id: number;
  input_length: number;
  candidates_generated: number;
  generation_time_ms: number;
  candidates: CandidateFlashcardDTO[];
  created_at: string;
}

// ============================================================================
// Flashcard Sets
// ============================================================================

/**
 * Flashcard set summary for list views
 * Derived from flashcard_sets_with_due_count view
 */
export interface FlashcardSetListDTO {
  id: number;
  user_id: string;
  title: string;
  cards_count: number;
  due_cards_count: number; // Coalesced to 0 in queries if null
  created_at: string;
  updated_at: string;
}

/**
 * Response for listing flashcard sets
 * GET /flashcard-sets - Response 200
 */
export interface FlashcardSetListResponseDTO {
  flashcard_sets: FlashcardSetListDTO[];
  pagination: PaginationDTO;
}

/**
 * Simplified flashcard progress for basic displays
 */
export type FlashcardProgressDTO = Pick<Tables<"flashcard_progress">, "state" | "due" | "reps" | "lapses">;

/**
 * Detailed flashcard progress including FSRS algorithm parameters
 */
export type DetailedProgressDTO = Pick<
  Tables<"flashcard_progress">,
  "state" | "due" | "stability" | "difficulty" | "reps" | "lapses"
>;

/**
 * Flashcard with basic progress information
 */
export type FlashcardWithProgressDTO = Tables<"flashcards"> & {
  progress: FlashcardProgressDTO;
};

/**
 * Detailed flashcard set with all flashcards
 * GET /flashcard-sets/:id - Response 200
 */
export type FlashcardSetDetailDTO = FlashcardSetListDTO & {
  flashcards: FlashcardWithProgressDTO[];
};

/**
 * Flashcard candidate with user action taken during set creation
 * Used when submitting final decisions to backend after AI generation
 */
export interface FlashcardCandidateWithActionDTO {
  temp_id: string;
  front: string;
  back: string;
  action: FlashcardActionType;
  /** True if user edited the original AI proposal */
  was_edited?: boolean;
}

/**
 * Metadata about AI generation session outcomes
 */
export interface GenerationMetadataDTO {
  generation_session_id: number;
  candidates_accepted: number;
  candidates_rejected: number;
  candidates_edited: number;
  acceptance_rate: number;
}

/**
 * Command to create a new flashcard set
 * POST /flashcard-sets
 */
export interface CreateFlashcardSetCommand {
  title: string;
  generation_session_id?: number;
  flashcards?: FlashcardCandidateWithActionDTO[];
}

/**
 * Response after creating a flashcard set
 * POST /flashcard-sets - Response 201
 */
export type CreateFlashcardSetResponseDTO = FlashcardSetListDTO & {
  generation_metadata?: GenerationMetadataDTO;
};

/**
 * Command to update flashcard set metadata
 * PATCH /flashcard-sets/:id
 */
export type UpdateFlashcardSetCommand = Pick<TablesUpdate<"flashcard_sets">, "title">;

/**
 * Flashcard with detailed progress for study sessions
 */
export type FlashcardDueDTO = Pick<Tables<"flashcards">, "id" | "front" | "back"> & {
  progress: DetailedProgressDTO;
};

/**
 * Response containing due flashcards for a set
 * GET /flashcard-sets/:id/due - Response 200
 */
export interface FlashcardSetDueResponseDTO {
  flashcard_set_id: number;
  due_cards_count: number;
  flashcards: FlashcardDueDTO[];
}

// ============================================================================
// Flashcards
// ============================================================================

/**
 * Command to create a new flashcard in an existing set
 * POST /flashcard-sets/:setId/flashcards
 */
export type CreateFlashcardCommand = Pick<TablesInsert<"flashcards">, "front" | "back">;

/**
 * Response after creating a flashcard with initialized progress
 * POST /flashcard-sets/:setId/flashcards - Response 201
 */
export type CreateFlashcardResponseDTO = Tables<"flashcards"> & {
  progress: Tables<"flashcard_progress">;
};

/**
 * Command to update flashcard content
 * PATCH /flashcards/:id
 */
export type UpdateFlashcardCommand = Pick<TablesUpdate<"flashcards">, "front" | "back">;

// ============================================================================
// Study Sessions
// ============================================================================

/**
 * Command to start a new study session
 * POST /study-sessions
 */
export type StartStudySessionCommand = Pick<TablesInsert<"study_sessions">, "flashcard_set_id">;

/**
 * Active study session with due flashcards
 * POST /study-sessions - Response 201
 */
export type StudySessionDTO = Tables<"study_sessions"> & {
  average_rating: number | null;
  duration_seconds: number | null;
  due_flashcards: FlashcardDueDTO[];
};

/**
 * Command to submit a flashcard review during study session
 * POST /study-sessions/:id/reviews
 */
export type SubmitReviewCommand = Pick<TablesInsert<"study_reviews">, "flashcard_id" | "rating">;

/**
 * Updated flashcard progress after review
 */
export type UpdatedProgressDTO = Pick<
  Tables<"flashcard_progress">,
  "flashcard_id" | "state" | "due" | "stability" | "difficulty" | "reps" | "lapses"
>;

/**
 * Response after submitting a review with updated progress
 * POST /study-sessions/:id/reviews - Response 201
 */
export type SubmitReviewResponseDTO = Tables<"study_reviews"> & {
  updated_progress: UpdatedProgressDTO;
};

/**
 * Command to complete a study session
 * PATCH /study-sessions/:id
 */
export type CompleteStudySessionCommand = Pick<TablesUpdate<"study_sessions">, "completed_at">;

/**
 * Completed study session summary
 * PATCH /study-sessions/:id - Response 200
 */
export type StudySessionSummaryDTO = Tables<"study_sessions"> & {
  average_rating: number;
  duration_seconds: number;
};

/**
 * Individual review item within a study session
 */
export type StudyReviewItemDTO = Tables<"study_reviews"> & {
  flashcard_front: string;
};

/**
 * Detailed study session with all reviews
 * GET /study-sessions/:id - Response 200
 */
export type StudySessionDetailDTO = StudySessionSummaryDTO & {
  flashcard_set_title: string;
  reviews: StudyReviewItemDTO[];
};

/**
 * Study session item for list views
 */
export type StudySessionListItemDTO = Omit<StudySessionSummaryDTO, "user_id"> & {
  flashcard_set_title: string;
};

/**
 * Response for listing study sessions
 * GET /study-sessions - Response 200
 */
export interface StudySessionListResponseDTO {
  study_sessions: StudySessionListItemDTO[];
  pagination: PaginationDTO;
}

// ============================================================================
// Admin Operations
// ============================================================================

/**
 * User account with aggregate statistics
 * GET /admin/users
 */
export type AdminUserDTO = Tables<"users"> & {
  flashcard_sets_count: number;
  total_flashcards: number;
};

/**
 * Response for listing users (admin only)
 * GET /admin/users - Response 200
 */
export interface AdminUserListResponseDTO {
  users: AdminUserDTO[];
  pagination: PaginationDTO;
}

/**
 * Command to reset user password (admin only)
 * PATCH /admin/users/:id/password
 */
export interface ResetPasswordCommand {
  new_password: string;
}

/**
 * Response after resetting user password
 * PATCH /admin/users/:id/password - Response 200
 */
export interface ResetPasswordResponseDTO {
  message: string;
  user_id: string;
  temporary_password: string;
}

/**
 * Response after deleting user account with deletion summary
 * DELETE /admin/users/:id - Response 200
 */
export interface DeleteUserResponseDTO {
  message: string;
  user_id: string;
  deleted_data: {
    flashcard_sets: number;
    flashcards: number;
    study_sessions: number;
    generation_sessions: number;
  };
}

/**
 * Aggregate metrics for AI generation performance
 * GET /admin/metrics/generation-sessions - Response 200
 */
export interface GenerationMetricsDTO {
  date_range: {
    start: string;
    end: string;
  };
  total_sessions: number;
  metrics: {
    average_input_length: number;
    average_candidates_generated: number;
    average_generation_time_ms: number;
    average_acceptance_rate: number;
    total_candidates_generated: number;
    total_candidates_accepted: number;
    total_candidates_rejected: number;
    total_candidates_edited: number;
  };
  performance_breakdown: {
    under_30s: number;
    "30s_to_45s": number;
    "45s_to_60s": number;
    timeout_errors: number;
  };
}

/**
 * System log entry for admin monitoring
 * GET /admin/logs
 */
export type SystemLogDTO = Tables<"system_logs">;

/**
 * Response for listing system logs (admin only)
 * GET /admin/logs - Response 200
 */
export interface SystemLogListResponseDTO {
  logs: SystemLogDTO[];
  pagination: PaginationDTO;
}
