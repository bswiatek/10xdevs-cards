name: Pull Request CI

on:
  pull_request:
    branches:
      - master
    types: [opened, synchronize, reopened]

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format -- --check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: lint
    environment: integration

    env:
      PLAYWRIGHT_BASE_URL: ${{ secrets.PLAYWRIGHT_BASE_URL }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
      E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: playwright-report/results.json
          retention-days: 7

  status-comment:
    name: PR Status Comment
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, e2e-tests]
    if: always() && github.event_name == 'pull_request'
    permissions:
      pull-requests: write

    steps:
      - name: Download unit test coverage
        uses: actions/download-artifact@v5
        continue-on-error: true
        with:
          name: unit-test-coverage
          path: ./coverage

      - name: Download E2E test results
        uses: actions/download-artifact@v5
        continue-on-error: true
        with:
          name: e2e-test-results
          path: ./e2e-results

      - name: Prepare status message
        id: status
        run: |
          echo "## 🚀 Pull Request CI Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check job statuses
          LINT_STATUS="${{ needs.lint.result }}"
          UNIT_STATUS="${{ needs.unit-tests.result }}"
          E2E_STATUS="${{ needs.e2e-tests.result }}"

          # Determine overall status
          if [[ "$LINT_STATUS" == "success" && "$UNIT_STATUS" == "success" && "$E2E_STATUS" == "success" ]]; then
            OVERALL="✅ All checks passed"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            OVERALL="❌ Some checks failed"
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

          echo "### $OVERALL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY

          # Lint status
          if [[ "$LINT_STATUS" == "success" ]]; then
            echo "| 🔍 Lint | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔍 Lint | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          # Unit tests status
          if [[ "$UNIT_STATUS" == "success" ]]; then
            echo "| 🧪 Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧪 Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          # E2E tests status
          if [[ "$E2E_STATUS" == "success" ]]; then
            echo "| 🎭 E2E Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🎭 E2E Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          # Save comment body
          cat $GITHUB_STEP_SUMMARY > comment.md

      - name: Comment PR
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('comment.md', 'utf8');

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Pull Request CI Status')
            );

            const commentBody = comment + '\n\n---\n*Updated: ' + new Date().toISOString() + '*';

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
